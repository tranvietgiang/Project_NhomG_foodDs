<?php

namespace App\Http\Controllers;

use App\Models\Product;
use App\Http\Middleware\checkLogin;
use App\Http\Middleware\LastActivity;
use App\Mail\OTPMail;
use App\Models\bill_product;
use App\Models\Cart;
use App\Models\Client;
use App\Models\day;
use App\Models\district;
use App\Models\login;
use App\Models\month;
use App\Models\province;
use App\Models\Review;
use App\Models\User;
use App\Models\ward;
use App\Models\year;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Laravel\Socialite\Facades\Socialite;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\RateLimiter;

class LoginController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index($page)
    {
        //
        if (Auth::check()) {
            return redirect()->route('website-main');
        }

        $checkWay = ['login', 'register', 'forgot'];

        if (!in_array($page, $checkWay)) {
            abort(404);
        }

        //Th√™m m·ªôt l·ªõp b·∫£o v·ªá n·ªØa n·∫øu file resources/views/login/{page}.blade.php kh√¥ng t·ªìn t·∫°i th·ª±c s·ª±.
        if (!view()->exists("login.$page")) {
            abort(404, "Page not found"); // Ho·∫∑c redirect, t√πy √Ω
        }

        return view("login.$page");
    }


    /**
     * login : ki·ªÉm tra user c√≥ ƒëƒÉng nh·∫≠p ch∆∞a
     * git
     */
    public function login(Request $req)
    {
        $originalEmail = $_POST['email'] ?? '';
        $email = trim($originalEmail);
        $password = $req->input('password');
        // dd($password);



        $key = 'login|' . $req->ip();
        if (RateLimiter::tooManyAttempts($key, 5)) {
            $seconds = RateLimiter::availableIn($key);
            return redirect()->back()->with("login-seconds", "Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau $seconds gi√¢y.");
        }

        /**check client entered? */
        if (empty($email) || empty($password)) {
            RateLimiter::hit($key, 60);
            return  redirect()->back()->with('email-password-empty', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email && password');
        }

        // Ki·ªÉm tra email h·ª£p l·ªá tr∆∞·ªõc khi truy v·∫•n database
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            RateLimiter::hit($key, 60);
            return redirect()->back()->with('invalid-email', 'Email kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i.');
        }

        // Ch·∫∑n n·∫øu ng∆∞·ªùi d√πng nh·∫≠p kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu/cu·ªëi email
        if ($originalEmail != $email) {
            RateLimiter::hit($key, 60);
            return redirect()->back()->with("email-space", "Email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng!");
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±
        $length_pass = strlen($password);
        if ($length_pass < 8 || $length_pass > 72) {
            RateLimiter::hit($key, 60);
            return redirect()->back()->with('short-password', 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n 8 v√† l·ªõn h∆°n 72 k√Ω t·ª±!');
        }

        /** email not exists in database */
        if (!User::where('email', $req->email)->exists()) {
            return  redirect()->back()->with('email-not-exists', 'Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω v√†o t√†i kho·∫£n');
        }

        if (!Auth::attempt($req->only('email', 'password'))) {
            // N·∫øu sai th√¨ tƒÉng s·ªë l·∫ßn th·ª≠
            RateLimiter::hit($key, 60);
            return redirect()->back()->with('wrong-password', 'm·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');
        }






        /**
         * Auth::attempt(): Laravel s·∫Ω ki·ªÉm tra xem email v√† m·∫≠t kh·∫©u c√≥ ƒë√∫ng kh√¥ng.
         * $req->only('email', 'password'): Ch·ªâ l·∫•y 2 gi√° tr·ªã t·ª´ request.
         */
        if (Auth::attempt($req->only('email', 'password'))) {
            $user = Auth::user();
            RateLimiter::clear($key);
            if ($user->role == 'admin') {
                /** l·∫•y name */
                session()->put('role_admin', $user->name);
                return redirect()->route('manager')->with('manage-success', 'Welcome admin to website');
            } else if ($user->role == 'employees') {

                $id_status = $user->id;
                /** check co dang online */
                User::where('id', $id_status)->update(['last_activity' => "online"]);

                session()->put('role_employees', $user->name);
                return redirect()->route('employees');
            } else if ($user->role == 'user') {
                /** s·ªë l·∫ßn ƒëƒÉng nh·∫≠p */
                session()->put('role_client', $user->name);
                session()->put('role_client_email', $user->email);
                return redirect()->route('website-main');
            } else {
                // Tr∆∞·ªùng h·ª£p kh√¥ng h·ª£p l·ªá
                Auth::logout(); // ƒêƒÉng xu·∫•t ƒë·ªÉ tr√°nh ƒëƒÉng nh·∫≠p b·∫•t th∆∞·ªùng
            }
        }
        return redirect()->back()->withErrors([
            'login-failed' =>
            'email ho·∫∑c m·∫≠t kh·∫©u sai',
        ])->withInput();
    }

    /**
     * laravel support
     * logout
     * git
     */
    public function logout(Request $req)
    {

        User::where('id', Auth::user()->id)->update(['last_activity' => "off"]);
        Auth::logout();
        $req->session()->invalidate();
        $req->session()->regenerateToken();

        return redirect()->route('wayLogin', ['page' => 'login'])->with('logout-success', "logout successfully!");
    }

    /** client right login before usd website */
    public function checkLogin()
    {
        if (!Auth::check()) {
            abort(redirect()->route('wayLogin', ['page' => 'login']));
        }
    }


    /**
     * show the form
     */
    public function showIndex()
    {
        if (Auth::check()) {

            if (Auth::user()->role != 'user') {
                // Auth::logout(); // ƒêƒÉng xu·∫•t user hi·ªán t·∫°i
                return redirect()->route('wayLogin', ['page' => 'login']);
            }

            $login_count = Client::where('user_id', Auth::user()->id)->first();
            if ($login_count) {
                $login_count->increment('login_count', 1);
            }
        }


        $products = Product::latest()->take(8)->get();

        /** √≠t b·ª≠a s·ª≠a l·∫°i th√†nh desc! */
        $content_data = Product::orderBy('created_at', 'ASC')->paginate(5);

        $content_data_hung = Product::orderBy('created_at', 'ASC')->paginate(8);

        /** get amount client buyed */
        $product_sold = DB::table('bill_products')
            ->select('product_id', DB::raw('COUNT(*) as sold_count'))
            ->groupBy('product_id')
            ->pluck('sold_count', 'product_id'); // tr·∫£ v·ªÅ ki·ªÉu: [product_id => sold_count]

        $amount_star_5 = DB::table('reviews')
            ->select('product_id', 'review_rating', DB::raw('COUNT(review_rating) as star_count'))
            ->where('review_rating', 5)
            ->groupBy('product_id', 'review_rating')
            ->pluck('star_count', 'product_id');

        /** l·∫•y ra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong cart my client */
        $amount_cart_header =  Cart::where('user_id', Auth::id())->count();

        return view('layout.index', compact(['content_data', 'products', 'content_data_hung', 'product_sold', 'amount_star_5', 'amount_cart_header']));
    }

    /** nh·ªØng s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t */
    public function OrderBestSale()
    {
        $content_data = DB::table('products as item')
            ->join('bill_products as a', 'item.product_id', '=', 'a.product_id')
            ->select(
                'item.product_id',
                'item.product_name',
                'item.product_image',
                'item.product_price',
                DB::raw('SUM(a.quantity) as SOLUONG')
            )
            ->groupBy('item.product_id', 'item.product_name', 'item.product_image', 'item.product_price')
            ->orderByDesc('SOLUONG')
            ->limit(5)
            ->get();

        // dd($content_data);

        $amount_star_5 = DB::table('reviews')
            ->select('product_id', 'review_rating', DB::raw('COUNT(review_rating) as star_count'))
            ->where('review_rating', 5)
            ->groupBy('product_id', 'review_rating')
            ->pluck('star_count', 'product_id');
        /* pluck('value_column', 'key_column') */

        return response()->json(
            [
                "data" => $content_data,
                'amount_star_5' => $amount_star_5
            ]
        );
    }


    // Hi·ªÉn th·ªã form nh·∫≠p email ƒë·ªÉ g·ª≠i OTP
    public function showOtpForm()
    {
        return view('emails.verify-otp');
    }


    /** form confirm otp email */
    public function formOtpForgot()
    {
        return view('emails.forgot_form_otp');
    }

    /** form update_pw otp email */
    public function forgot_form()
    {
        return view('login.form-forgot');
    }




    /** register email otp git */
    public function Register(Request $req)
    {
        /*explain: alpha_num:
         * Ch·ªØ c√°i trong alpha_num:
         * Ch·ªâ bao g·ªìm c√°c k√Ω t·ª± ch·ªØ c√°i t·ª´ a-z v√† A-Z (theo b·∫£ng ch·ªØ c√°i Latinh, t·ª©c l√† k√Ω t·ª± ASCII).
         * Kh√¥ng bao g·ªìm c√°c k√Ω t·ª± ch·ªØ c√°i t·ª´ c√°c ng√¥n ng·ªØ kh√°c nh∆∞ ti·∫øng Nh·∫≠t (hiragana, katakana, kanji), ti·∫øng Trung, ti·∫øng H√†n, v.v.
         * Kh√¥ng bao g·ªìm c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát (nh∆∞ @, #, $, v.v.) ho·∫∑c d·∫•u c√°ch (space).
         */
        /**
         * üìå Gi·∫£i th√≠ch t·ª´ng ph·∫ßn:
         * 
         * required: Tr∆∞·ªùng b·∫Øt bu·ªôc (kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng).

         * max:50: Gi·ªõi h·∫°n t·ªëi ƒëa 50 k√Ω t·ª±.

         * email: Ph·∫£i l√† email h·ª£p l·ªá.

         * unique:users,email	Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong b·∫£ng users ch∆∞a. N·∫øu c√≥ r·ªìi, n√≥ b√°o l·ªói. D√πng ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p khi ƒëƒÉng k√Ω.
         
         * exists:users,email	Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong b·∫£ng users kh√¥ng. N·∫øu kh√¥ng c√≥, n√≥ b√°o l·ªói. D√πng ƒë·ªÉ ki·ªÉm tra khi ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥i ph·ª•c m·∫≠t kh·∫©u.
         
         * min:4: M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±.

         * confirmed: Laravel s·∫Ω ki·ªÉm tra xem c√≥ password_confirmation kh√¥ng, n·∫øu kh√¥ng c√≥ ho·∫∑c kh√¥ng kh·ªõp, s·∫Ω b√°o l·ªói.
         */
        $originalName = $_POST['username'] ?? '';
        $username = trim($originalName);

        $originalEmail = $_POST['email'] ?? '';
        $email = trim($originalEmail);

        $password = $_POST['password'] ?? '';

        $a = $originalName !== $username ? true : false;
        $b = $originalEmail !== $email ? true :  false;
        if ($a && $b) {
            return redirect()->back()->with("email-name-space", "Username && Email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng!");
        }

        if ($originalName !== $username) {
            return redirect()->back()->with("username-space", "username kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng!");
        }
        // Ki·ªÉm tra username
        if ($originalEmail !== $email) {
            return redirect()->back()->with("email-space", "Email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng!");
        }


        /** check password */
        if (strlen($password) < 8) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.');
        }

        if (!preg_match('/[a-z]/', $password)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ th∆∞·ªùng.');
        }

        if (!preg_match('/[A-Z]/', $password)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ hoa.');
        }

        if (!preg_match('/\d/', $password)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë.');
        }

        if (!preg_match('/[@$!%*?&]/', $password)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát.');
        }

        if (preg_match('/\s/', $password)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng.');
        }


        $req->validate([
            'username' => 'required|min:6|max:50|alpha_num',
            'email' => 'required|email|unique:users,email',
            // 'password' => 'required|min:8|confirmed|regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/', //regex: Y√™u c·∫ßu √≠t nh·∫•t m·ªôt ch·ªØ th∆∞·ªùng, m·ªôt ch·ªØ hoa, m·ªôt s·ªë, m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát.
            'password' => 'confirmed'
        ], [
            'username.max' => 'Username kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±.',
            'username.min' => 'Username kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n 6 k√Ω t·ª±.',
            'username.alpha_num' => 'Username ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† s·ªë.',
            'email.unique' => 'Email ƒë√£ t·ªìn t·∫°i, vui l√≤ng s·ª≠ d·ª•ng email kh√°c!',
            'email.email' => 'Email ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng',
            'password.min' => 'Tr∆∞·ªùng m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.',
            'password.confirmed' => 'M·∫≠t kh·∫©u kh√¥ng tr√πng nhau', //d√πng confirmed khi c√≥ m·ªôt field x√°c nh·∫≠n t∆∞∆°ng ·ª©ng, v√≠ d·ª•
            // 'password.regex' => 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ hoa, m·ªôt ch·ªØ th∆∞·ªùng, m·ªôt s·ªë v√† m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát.',
        ]);



        Session::put('otp_page', 'register'); // L∆∞u tr·∫°ng th√°i l√† 'register'

        /** t·∫°o session ƒë·ªÉ l∆∞ data check user entry otp r·ªìi m·ªõi add account */
        Session::put('user_account_otp', [
            'name' => $username,
            'email' => $email,
            'password' => Hash::make($password)
        ]);

        // T·∫°o OTP
        $otp = rand(100000, 999999);
        Session::put('otp', $otp);
        Session::put('email', $email);

        try {
            // G·ª≠i OTP qua email
            Mail::to($email)->send(new OTPMail($otp, $email));
        } catch (\Exception $e) {
            return back()->with('email_send_error', 'G·ª≠i OTP th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        return redirect()->route('otp.form');
    }



    // git forget G·ª≠i l·∫°i OTP t·ªõi email , h√†m n√†y s·∫Ω check xem user ƒëang ·ªü form n√†o m√† di chuy·ªÉn ƒë√∫ng ƒë·∫øn form ƒë√≥ v√† g·ª≠i email
    public function sendOtp()
    {
        $email = session('email'); // L·∫•y t·ª´ session thay v√¨ request



        // X√°c ƒë·ªãnh trang tr∆∞·ªõc ƒë√≥ (trang ƒëƒÉng k√Ω hay qu√™n m·∫≠t kh·∫©u)
        // ki·ªÉm tra tra tr∆∞·ªõc ƒë√≥ c√≥ ch·ª©a form-otp kh√¥ng n·∫øu c√≥ th√¨ qua form-otp
        // $previousUrl = url()->previous();
        // $page = str_contains($previousUrl, 'form-otp') ? 'form-otp' : 'otpForgot';


        if (!$email) {
            return redirect()->route('wayLogin', ['page' => 'login'])
                ->with('error', 'Kh√¥ng t√¨m th·∫•y email trong session, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.');
        }

        // T·∫°o OTP
        $otp = rand(100000, 999999);
        Session::put('otp', $otp);
        Session::put('email', $email);

        // G·ª≠i OTP qua email
        Mail::to($email)->send(new OTPMail($otp, $email));

        return redirect()->back()->with('success', 'M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.');
    }


    /** check email have exists qua page update password git */
    public function forgot(Request $req)
    {

        $originalEmail = $_POST['email'] ?? '';
        $email = trim($originalEmail);


        // dd([$originalEmail, $email]);

        if ($originalEmail != $email) {
            return redirect()->back()->with('email-space', 'email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng');
        }

        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return redirect()->back()->with('invalid-email', 'Email kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i.');
        }

        // dd($_POST['email']);

        if (!User::where('email', $email)->first()) {
            return redirect()->back()->with('email_not_exists_forgot', 'Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω');
        }

        session()->put('email_user', $email);

        // T·∫°o OTP
        $otp = rand(100000, 999999);
        Session::put('otp', $otp);
        Session::put('email', $email);

        try {
            // G·ª≠i OTP qua email
            Mail::to($email)->send(new OTPMail($otp, $email));
        } catch (\Exception $e) {
            return back()->with('email_send_error', 'G·ª≠i OTP th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }


        return redirect()->route('form.otp')->with('email_exists_otp', 'Vui l√≤ng nh·∫≠p otp');
    }


    /** confirm otp send qua email forget */
    public function verifyOtpForgot(Request $request)
    {

        $request->validate([
            'otp' => 'required|numeric',
        ]);

        if ($request->otp == session('otp')) {
            // qua login
            return redirect()->route('forgot_form')->with('success-otp-email-forgot', 'Vui l√≤ng nh·∫≠p password m·ªõi!');
        }

        return back()->with('failed', 'M√£ OTP kh√¥ng ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i.');
    }

    /**update password for client forget */
    public function update_pw(Request $req)
    {
        $email = $req->input('email');
        $pw = $req->input('password');
        $pw_c = $req->input('password_confirmed');


        // 3. Ki·ªÉm tra regex
        /**
         * Bi·ªÉu th·ª©c tr√™n c√≥ nghƒ©a:

         *(?=.*[a-z]): c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng

         *(?=.*[A-Z]): c√≥ √≠t nh·∫•t 1 ch·ªØ hoa

         *(?=.*\d): c√≥ √≠t nh·∫•t 1 s·ªë

         *(?=.*[@$!%*?&]): c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát

         *[A-Za-z\d@$!%*?&]{8,}: t·ªïng c·ªông √≠t nh·∫•t 8 k√Ω t·ª±, ch·ªâ g·ªìm nh·ªØng k√Ω t·ª± n√†y
         */
        // if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[^\s]{8,}$/', $pw)) {
        // M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá
        //     return redirect()->back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ hoa, m·ªôt ch·ªØ th∆∞·ªùng, m·ªôt s·ªë v√† m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát, kh√¥ng c√≥ kho·∫£ng tr·∫Øng.');
        // }


        if (strlen($pw) < 8) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.');
        }

        if (!preg_match('/[a-z]/', $pw)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ th∆∞·ªùng.');
        }

        if (!preg_match('/[A-Z]/', $pw)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ hoa.');
        }

        if (!preg_match('/\d/', $pw)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë.');
        }

        if (!preg_match('/[@$!%*?&]/', $pw)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát.');
        }

        if (preg_match('/\s/', $pw)) {
            return back()->with('regex-weak-password', 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng.');
        }


        //  Ki·ªÉm tra password kh·ªõp v·ªõi password_confirmed
        if ($pw !== $pw_c) {
            return redirect()->back()->with('password-do-not-match', 'password kh√¥ng tr√πng nhau!');
        }


        /** l·∫•y password c≈© so s√°ch v·ªõi password new b·∫±ng h√†m hash::check */
        $pw_old = User::where('email', $email)->first();
        if (Hash::check($pw, $pw_old->password)) {
            return redirect()->back()->with('pw-pw_old-match', 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!');
        }

        $login = User::where('email', $email)->first();
        if ($login) {
            $login->password = hash::make($pw);
            $login->save();
        }

        return redirect()->route('wayLogin', ['page' => 'login'])->with('update_pw_success', 'Update password success');
    }


    //git register X√°c minh OTP y√™u c·∫ßu t·ª´ h√†m(Register) r·ªìi xu·ªëng ƒë√¢y m·ªõi create account
    public function verifyOtp(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'otp' => 'required|numeric',
        ]);


        /** n·∫øu ng∆∞·ªùi d√πng ƒë·ªÉ ch·ªù nh·∫≠p otp qu√°
         * N·∫øu ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang ho·∫∑c ƒë√≥ng tr√¨nh duy·ªát, session c√≥ th·ªÉ h·∫øt h·∫°n, l√∫c n√†y Laravel b√°o l·ªói "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n".
         * b·∫°n c√≥ th·ªÉ thi·∫øt l·∫≠p session timeout trong config/session.php:
         * 'lifetime' => 120, // S·ªë ph√∫t tr∆∞·ªõc khi session h·∫øt h·∫°n
         */
        if (!Session::has('user_account_otp')) {
            return redirect()->route('wayLogin', ['page' => 'login'])
                ->with('error', 'Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.');
        }


        if (
            $request->email === session('email') &&
            $request->otp == session('otp')
        ) {
            $userData = Session::get('user_account_otp');
            $user = User::create([
                'name' => $userData['name'],
                'email' => $userData['email'],
                'password' => $userData['password'],
                'email_verified_at' => now(),
                'provider' => '',
                'provider_id' => ''
            ]);

            // /** khi m√† ƒëƒÉng k√Ω th√¨ client s·∫Ω ƒë∆∞·ª£c information client */
            // Client::create([
            //     'user_id' => $user->id,
            //     'client_name' => $userData['name']
            // ]);

            Auth::login($user);
            Session::forget(['otp', 'email', 'user_account_otp']); // X√≥a session sau khi th√†nh c√¥ng
            return redirect()->route('wayLogin', ['page' => 'login'])->with('success_register', 'ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p');
        }


        return back()->with('email_verifyOtp_failed', 'M√£ OTP kh√¥ng ch√≠nh x√°c, vui l√≤ng th·ª≠ l·∫°i.');
    }

    /** hi·ªán th·ªã t√™n huy·ªán/qu·∫≠n */
    public function getDistricts(Request $request)
    {
        $districts = district::where('province_id', $request->province_id)->get();
        return response()->json($districts);
    }

    /** hi·ªán th·ªã t√™n x√£/ph∆∞·ªùng */
    public function getWards(Request $request)
    {
        $wards = ward::where('district_id', $request->district_id)->get();
        return response()->json($wards);
    }

    /** show form information client git */
    public function show_information(Request $req)
    {

        $day = Day::orderBy('day', 'ASC')->get();
        $year = Year::orderBy('year', 'ASC')->get();

        $provinces = province::orderBy('province_id', 'ASC')->get();


        $client_image = Client::where('user_id', Auth::user()->id)->first(['client_avatar']);

        $amount_cart_header =  Cart::where('user_id', Auth::id())->count();
        return view('component.header.admin.client.information', compact('day', 'year', 'provinces', 'client_image', 'amount_cart_header'));
    }
}